rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    // 
    // Users collection — users can only edit their own profile
    match /Users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (
        // Owner can update anything
        userId == request.auth.uid ||
        // Non-owner: can only modify followers, following array
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers']) &&
          request.resource.data.followers is list
        ) || 
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['following']) &&
          request.resource.data.following is list
        )
      );
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Posts collection — only owner can edit/delete
    match /Posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && (
        // Owner can update anything
        resource.data.userId == request.auth.uid ||
        // Non-owner: can only modify likes array
        (
          request.resource.data.keys().hasAll(['likes']) &&
          request.resource.data.likes is list &&
          // Ensure all other fields are unchanged
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])
        )
      );
      allow delete: if request.auth != null
        && resource.data.userId == request.auth.uid;
    }

    // Comments collection — only owner can delete
    match /Comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null
        && resource.data.userId == request.auth.uid;
    }
  }
}